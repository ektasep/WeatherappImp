//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1+g046e9eb0a2
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 2.4 -InputFile icons8-location (1).json
//       
//       Input file:
//           icons8-location (1).json (10828 bytes created 9:44+05:30 Dec 21 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// __________________________________________________________________________
// |       Object stats       | UAP v11 count | UAP v8 count | UAP v7 count |
// |__________________________|_______________|______________|______________|
// | All CompositionObjects   |           110 |          106 |           60 |
// |--------------------------+---------------+--------------+--------------|
// | Expression animators     |             9 |            8 |            6 |
// | KeyFrame animators       |             9 |            8 |            6 |
// | Reference parameters     |             9 |            8 |            6 |
// | Expression operations    |             0 |            0 |            0 |
// |--------------------------+---------------+--------------+--------------|
// | Animated brushes         |             - |            - |            - |
// | Animated gradient stops  |             - |            - |            - |
// | ExpressionAnimations     |             1 |            1 |            1 |
// | PathKeyFrameAnimations   |             1 |            - |            - |
// |--------------------------+---------------+--------------+--------------|
// | ContainerVisuals         |             5 |            5 |            1 |
// | ShapeVisuals             |             5 |            5 |            3 |
// |--------------------------+---------------+--------------+--------------|
// | ContainerShapes          |             1 |            1 |            1 |
// | CompositionSpriteShapes  |             6 |            6 |            4 |
// |--------------------------+---------------+--------------+--------------|
// | Brushes                  |             7 |            7 |            1 |
// | Gradient stops           |             - |            - |            - |
// | CompositionVisualSurface |             4 |            4 |            - |
// --------------------------------------------------------------------------
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;

namespace Drizzle.UI.UWP.AnimatedIcons
{
    // Name:        place-marker
    // Frame rate:  24 fps
    // Frame count: 28
    // Duration:    1166.7 mS
    sealed class Geotag
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 1.167 seconds.
        internal const long c_durationTicks = 11666666;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (Icons8_location_1__AnimatedVisual_UAPv11.IsRuntimeCompatible())
            {
                var res = 
                    new Icons8_location_1__AnimatedVisual_UAPv11(
                        compositor
                        );
                    return res;
            }

            if (Icons8_location_1__AnimatedVisual_UAPv8.IsRuntimeCompatible())
            {
                var res = 
                    new Icons8_location_1__AnimatedVisual_UAPv8(
                        compositor
                        );
                    return res;
            }

            if (Icons8_location_1__AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res = 
                    new Icons8_location_1__AnimatedVisual_UAPv7(
                        compositor
                        );
                    return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 28d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 24d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 28d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Icons8_location_1__AnimatedVisual_UAPv11 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_0;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_1;
            CompositionColorBrush _colorBrush_Black;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 0.
                var result = _isVisibleBooleanAnimation_0 = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, true);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 0.
                var result = _isVisibleBooleanAnimation_1 = CreateBooleanKeyFrameAnimation(0F, true);
                // Frame 19.
                result.InsertKeyFrame(0.678571403F, false);
                return result;
            }

            // - - - Opacity for layer: circle 2
            // - - ShapeGroup: Group 1 Offset:<24, 36>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 0.0130000003F));
                    builder.AddCubicBezier(new Vector2(-0.0160000008F, 0.0130000003F), new Vector2(-0.0309999995F, 0.00899999961F), new Vector2(-0.0309999995F, 0F));
                    builder.AddCubicBezier(new Vector2(-0.0309999995F, -0.00899999961F), new Vector2(-0.0160000008F, -0.0130000003F), new Vector2(0F, -0.0130000003F));
                    builder.AddCubicBezier(new Vector2(0.0160000008F, -0.0130000003F), new Vector2(0.0309999995F, -0.00899999961F), new Vector2(0.0309999995F, 0F));
                    builder.AddCubicBezier(new Vector2(0.0309999995F, 0.00899999961F), new Vector2(0.0160000008F, 0.0130000003F), new Vector2(0F, 0.0130000003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(0F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 18.5009995F));
                    builder.AddCubicBezier(new Vector2(-1.46800005F, 18.5009995F), new Vector2(-2.93700004F, 17.9549999F), new Vector2(-4.08099985F, 16.8640003F));
                    builder.AddCubicBezier(new Vector2(-6.05200005F, 14.9820004F), new Vector2(-11.5360003F, 8.61100006F), new Vector2(-12.1549997F, 7.8920002F));
                    builder.AddCubicBezier(new Vector2(-14.6370001F, 4.98600006F), new Vector2(-16F, 1.29900002F), new Vector2(-16F, -2.50099993F));
                    builder.AddCubicBezier(new Vector2(-16F, -11.323F), new Vector2(-8.82199955F, -18.5009995F), new Vector2(0F, -18.5009995F));
                    builder.AddCubicBezier(new Vector2(8.82299995F, -18.5009995F), new Vector2(16F, -11.323F), new Vector2(16F, -2.50099993F));
                    builder.AddCubicBezier(new Vector2(16F, 1.29900002F), new Vector2(14.6370001F, 4.98699999F), new Vector2(12.1610003F, 7.88500023F));
                    builder.AddCubicBezier(new Vector2(11.9320002F, 8.15299988F), new Vector2(6.40399981F, 14.6479998F), new Vector2(4.08199978F, 16.8640003F));
                    builder.AddCubicBezier(new Vector2(2.93700004F, 17.9549999F), new Vector2(1.46800005F, 18.5009995F), new Vector2(0F, 18.5009995F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Opacity for layer: circle
            // - - ShapeGroup: Group 1 Offset:<24, 36>
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 8F));
                    builder.AddCubicBezier(new Vector2(-9.44200039F, 8F), new Vector2(-19F, 5.25199986F), new Vector2(-19F, 0F));
                    builder.AddCubicBezier(new Vector2(-19F, -5.25199986F), new Vector2(-9.44200039F, -8F), new Vector2(0F, -8F));
                    builder.AddCubicBezier(new Vector2(9.44099998F, -8F), new Vector2(19F, -5.25199986F), new Vector2(19F, 0F));
                    builder.AddCubicBezier(new Vector2(19F, 5.25199986F), new Vector2(9.44099998F, 8F), new Vector2(0F, 8F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(0F, -5F));
                    builder.AddCubicBezier(new Vector2(-9.7670002F, -5F), new Vector2(-16F, -2.03900003F), new Vector2(-16F, 0F));
                    builder.AddCubicBezier(new Vector2(-16F, 2.03900003F), new Vector2(-9.7670002F, 5F), new Vector2(0F, 5F));
                    builder.AddCubicBezier(new Vector2(9.7670002F, 5F), new Vector2(16F, 2.03900003F), new Vector2(16F, 0F));
                    builder.AddCubicBezier(new Vector2(16F, -2.03900003F), new Vector2(9.7670002F, -5F), new Vector2(0F, -5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: marker
            // - - ShapeGroup: Group 2 Offset:<24, 18>
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -4.5F));
                    builder.AddCubicBezier(new Vector2(2.4849999F, -4.5F), new Vector2(4.5F, -2.4849999F), new Vector2(4.5F, 0F));
                    builder.AddCubicBezier(new Vector2(4.5F, 2.4849999F), new Vector2(2.4849999F, 4.5F), new Vector2(0F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-2.4849999F, 4.5F), new Vector2(-4.5F, 2.4849999F), new Vector2(-4.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-4.5F, -2.4849999F), new Vector2(-2.4849999F, -4.5F), new Vector2(0F, -4.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(12.5F, -2.61199999F));
                    builder.AddCubicBezier(new Vector2(12.5F, -9.51599979F), new Vector2(6.90399981F, -15.1120005F), new Vector2(0F, -15.1120005F));
                    builder.AddCubicBezier(new Vector2(-6.90399981F, -15.1120005F), new Vector2(-12.5F, -9.51599979F), new Vector2(-12.5F, -2.61199999F));
                    builder.AddCubicBezier(new Vector2(-12.5F, 0.486000001F), new Vector2(-11.3669996F, 3.31500006F), new Vector2(-9.5010004F, 5.49900007F));
                    builder.AddCubicBezier(new Vector2(-9.5010004F, 5.49900007F), new Vector2(-3.56800008F, 12.4049997F), new Vector2(-1.66600001F, 14.2200003F));
                    builder.AddCubicBezier(new Vector2(-0.731000006F, 15.1120005F), new Vector2(0.730000019F, 15.1120005F), new Vector2(1.66499996F, 14.2200003F));
                    builder.AddCubicBezier(new Vector2(3.88199997F, 12.1059999F), new Vector2(9.5F, 5.49900007F), new Vector2(9.5F, 5.49900007F));
                    builder.AddCubicBezier(new Vector2(11.3669996F, 3.31500006F), new Vector2(12.5F, 0.486000001F), new Vector2(12.5F, -2.61199999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: marker
            // - - - ShapeGroup: Group 1 Offset:<24, 20.612>
            // - Path
            CanvasGeometry Geometry_5()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(11.7279997F, -3.77099991F));
                    builder.AddCubicBezier(new Vector2(11.7279997F, -10.2489996F), new Vector2(6.47800016F, -15.4989996F), new Vector2(0F, -15.4989996F));
                    builder.AddCubicBezier(new Vector2(-6.47800016F, -15.4989996F), new Vector2(-11.7279997F, -10.2489996F), new Vector2(-11.7279997F, -3.77099991F));
                    builder.AddCubicBezier(new Vector2(-11.7279997F, -0.864000022F), new Vector2(-10.665F, 1.78999996F), new Vector2(-8.91399956F, 3.83899999F));
                    builder.AddCubicBezier(new Vector2(-8.91399956F, 3.83899999F), new Vector2(-3.34800005F, 10.3190002F), new Vector2(-1.56299996F, 12.0220003F));
                    builder.AddCubicBezier(new Vector2(-0.68599999F, 12.8590002F), new Vector2(0.685000002F, 12.8590002F), new Vector2(1.56200004F, 12.0220003F));
                    builder.AddCubicBezier(new Vector2(3.64199996F, 10.0389996F), new Vector2(8.91300011F, 3.83899999F), new Vector2(8.91300011F, 3.83899999F));
                    builder.AddCubicBezier(new Vector2(10.665F, 1.78999996F), new Vector2(11.7279997F, -0.864000022F), new Vector2(11.7279997F, -3.77099991F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: marker
            // - - - ShapeGroup: Group 1 Offset:<24, 20.612>
            // - Path
            CanvasGeometry Geometry_6()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(12.5F, -3.11199999F));
                    builder.AddCubicBezier(new Vector2(12.5F, -10.0159998F), new Vector2(6.90399981F, -15.6120005F), new Vector2(0F, -15.6120005F));
                    builder.AddCubicBezier(new Vector2(-6.90399981F, -15.6120005F), new Vector2(-12.5F, -10.0159998F), new Vector2(-12.5F, -3.11199999F));
                    builder.AddCubicBezier(new Vector2(-12.5F, -0.0140000004F), new Vector2(-11.3669996F, 2.81500006F), new Vector2(-9.5010004F, 4.99900007F));
                    builder.AddCubicBezier(new Vector2(-9.5010004F, 4.99900007F), new Vector2(-3.55900002F, 12.4359999F), new Vector2(-1.65699995F, 14.2510004F));
                    builder.AddCubicBezier(new Vector2(-0.722000003F, 15.1429996F), new Vector2(0.739000022F, 15.1429996F), new Vector2(1.67400002F, 14.2510004F));
                    builder.AddCubicBezier(new Vector2(3.89100003F, 12.1370001F), new Vector2(9.5F, 4.99900007F), new Vector2(9.5F, 4.99900007F));
                    builder.AddCubicBezier(new Vector2(11.3669996F, 2.81500006F), new Vector2(12.5F, -0.0140000004F), new Vector2(12.5F, -3.11199999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
            }

            // Shape tree root for layer: marker
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: Group 2 Offset:<24, 18>
                shapes.Add(SpriteShape_4());
                // ShapeGroup: Group 1 Offset:<24, 20.612>
                shapes.Add(SpriteShape_5());
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            CompositionEffectBrush EffectBrush_0()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationOut;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectBrush EffectBrush_1()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationOut;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            CompositionPath Path()
            {
                var result = _path = new CompositionPath(Geometry_4());
                return result;
            }

            // - Opacity for layer: circle 2
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 2 Offset:<24, 18>
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 1 Offset:<24, 20.612>
            CompositionPathGeometry PathGeometry_4()
            {
                var result = _c.CreatePathGeometry();
                StartProgressBoundAnimation(result, "Path", PathKeyFrameAnimation_0(), _rootProgress);
                return result;
            }

            // Opacity for layer: circle 2
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<24, 36>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 36F), ColorBrush_Black());;
                return result;
            }

            // Shape tree root for layer: mask 2
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<24, 20.501>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 20.5009995F), _colorBrush_Black);;
                return result;
            }

            // Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<24, 36>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 36F), _colorBrush_Black);;
                return result;
            }

            // Shape tree root for layer: mask
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<24, 20.501>
                var geometry = _pathGeometry_1;
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 20.5009995F), _colorBrush_Black);;
                return result;
            }

            // - Shape tree root for layer: marker
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<24, 18>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 18F));;
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 3F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: marker
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<24, 20.612>
                var result = CreateSpriteShape(PathGeometry_4(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 20.6119995F));;
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 3F;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Opacity for layer: circle 2
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask 2
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Opacity for layer: circle
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask
                result.Children.InsertAtTop(ShapeVisual_3());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                children.InsertAtTop(SpriteVisual_0());
                children.InsertAtTop(SpriteVisual_1());
                // Shape tree root for layer: marker
                children.InsertAtTop(ShapeVisual_4());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // - - - Shape tree root for layer: marker
            // - ShapeGroup: Group 1 Offset:<24, 20.612>
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation_0()
            {
                // Frame 0.
                var result = CreatePathKeyFrameAnimation(0F, Path(), _stepThenHoldEasingFunction);
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, _path, _holdThenStepEasingFunction);
                // Frame 8.
                result.InsertKeyFrame(0.285714298F, new CompositionPath(Geometry_5()), _cubicBezierEasingFunction_0);
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, _path, _cubicBezierEasingFunction_0);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new CompositionPath(Geometry_6()), _cubicBezierEasingFunction_0);
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, _path, _cubicBezierEasingFunction_0);
                return result;
            }

            // Opacity for layer: circle 2
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, 0F, HoldThenStepEasingFunction());
                // Frame 24.
                result.InsertKeyFrame(0.857142866F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Opacity for layer: circle
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, _stepThenHoldEasingFunction);
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, 1F, _holdThenStepEasingFunction);
                // Frame 19.
                result.InsertKeyFrame(0.678571403F, 0F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Shape tree root for layer: circle 2
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 36>
                result.Shapes.Add(SpriteShape_0());
                StartProgressBoundAnimation(result, "Opacity", OpacityScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: mask 2
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 20.501>
                result.Shapes.Add(SpriteShape_1());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_0, _rootProgress);
                return result;
            }

            // Shape tree root for layer: circle
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 36>
                result.Shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "Opacity", OpacityScalarAnimation_1_to_0(), _rootProgress);
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: mask
            ShapeVisual ShapeVisual_3()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 20.501>
                result.Shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_1, _rootProgress);
                return result;
            }

            // Shape tree root for layer: marker
            ShapeVisual ShapeVisual_4()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_0();
                return result;
            }

            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_1();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 2 Offset:<24, 18>
            // Path animation as a translation.
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _stepThenHoldEasingFunction);
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(0F, -1F), _cubicBezierEasingFunction_0);
                // Frame 8.
                result.InsertKeyFrame(0.285714298F, new Vector2(0F, -2.25F), _cubicBezierEasingFunction_0);
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(0F, 1F), _cubicBezierEasingFunction_0);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(0F, -0.469000012F), _cubicBezierEasingFunction_0);
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Shape tree root for layer: marker
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _stepThenHoldEasingFunction);
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(0F, -2F), _cubicBezierEasingFunction_0);
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Icons8_location_1__AnimatedVisual_UAPv11(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 11);
            }
        }

        sealed class Icons8_location_1__AnimatedVisual_UAPv8 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_0;
            BooleanKeyFrameAnimation _isVisibleBooleanAnimation_1;
            CompositionColorBrush _colorBrush_Black;
            CompositionPathGeometry _pathGeometry_1;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 0.
                var result = _isVisibleBooleanAnimation_0 = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, true);
                return result;
            }

            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 0.
                var result = _isVisibleBooleanAnimation_1 = CreateBooleanKeyFrameAnimation(0F, true);
                // Frame 19.
                result.InsertKeyFrame(0.678571403F, false);
                return result;
            }

            // - - - Opacity for layer: circle 2
            // - - ShapeGroup: Group 1 Offset:<24, 36>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 0.0130000003F));
                    builder.AddCubicBezier(new Vector2(-0.0160000008F, 0.0130000003F), new Vector2(-0.0309999995F, 0.00899999961F), new Vector2(-0.0309999995F, 0F));
                    builder.AddCubicBezier(new Vector2(-0.0309999995F, -0.00899999961F), new Vector2(-0.0160000008F, -0.0130000003F), new Vector2(0F, -0.0130000003F));
                    builder.AddCubicBezier(new Vector2(0.0160000008F, -0.0130000003F), new Vector2(0.0309999995F, -0.00899999961F), new Vector2(0.0309999995F, 0F));
                    builder.AddCubicBezier(new Vector2(0.0309999995F, 0.00899999961F), new Vector2(0.0160000008F, 0.0130000003F), new Vector2(0F, 0.0130000003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(0F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 18.5009995F));
                    builder.AddCubicBezier(new Vector2(-1.46800005F, 18.5009995F), new Vector2(-2.93700004F, 17.9549999F), new Vector2(-4.08099985F, 16.8640003F));
                    builder.AddCubicBezier(new Vector2(-6.05200005F, 14.9820004F), new Vector2(-11.5360003F, 8.61100006F), new Vector2(-12.1549997F, 7.8920002F));
                    builder.AddCubicBezier(new Vector2(-14.6370001F, 4.98600006F), new Vector2(-16F, 1.29900002F), new Vector2(-16F, -2.50099993F));
                    builder.AddCubicBezier(new Vector2(-16F, -11.323F), new Vector2(-8.82199955F, -18.5009995F), new Vector2(0F, -18.5009995F));
                    builder.AddCubicBezier(new Vector2(8.82299995F, -18.5009995F), new Vector2(16F, -11.323F), new Vector2(16F, -2.50099993F));
                    builder.AddCubicBezier(new Vector2(16F, 1.29900002F), new Vector2(14.6370001F, 4.98699999F), new Vector2(12.1610003F, 7.88500023F));
                    builder.AddCubicBezier(new Vector2(11.9320002F, 8.15299988F), new Vector2(6.40399981F, 14.6479998F), new Vector2(4.08199978F, 16.8640003F));
                    builder.AddCubicBezier(new Vector2(2.93700004F, 17.9549999F), new Vector2(1.46800005F, 18.5009995F), new Vector2(0F, 18.5009995F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Opacity for layer: circle
            // - - ShapeGroup: Group 1 Offset:<24, 36>
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 8F));
                    builder.AddCubicBezier(new Vector2(-9.44200039F, 8F), new Vector2(-19F, 5.25199986F), new Vector2(-19F, 0F));
                    builder.AddCubicBezier(new Vector2(-19F, -5.25199986F), new Vector2(-9.44200039F, -8F), new Vector2(0F, -8F));
                    builder.AddCubicBezier(new Vector2(9.44099998F, -8F), new Vector2(19F, -5.25199986F), new Vector2(19F, 0F));
                    builder.AddCubicBezier(new Vector2(19F, 5.25199986F), new Vector2(9.44099998F, 8F), new Vector2(0F, 8F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(0F, -5F));
                    builder.AddCubicBezier(new Vector2(-9.7670002F, -5F), new Vector2(-16F, -2.03900003F), new Vector2(-16F, 0F));
                    builder.AddCubicBezier(new Vector2(-16F, 2.03900003F), new Vector2(-9.7670002F, 5F), new Vector2(0F, 5F));
                    builder.AddCubicBezier(new Vector2(9.7670002F, 5F), new Vector2(16F, 2.03900003F), new Vector2(16F, 0F));
                    builder.AddCubicBezier(new Vector2(16F, -2.03900003F), new Vector2(9.7670002F, -5F), new Vector2(0F, -5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: marker
            // - - ShapeGroup: Group 2 Offset:<24, 18>
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -4.5F));
                    builder.AddCubicBezier(new Vector2(2.4849999F, -4.5F), new Vector2(4.5F, -2.4849999F), new Vector2(4.5F, 0F));
                    builder.AddCubicBezier(new Vector2(4.5F, 2.4849999F), new Vector2(2.4849999F, 4.5F), new Vector2(0F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-2.4849999F, 4.5F), new Vector2(-4.5F, 2.4849999F), new Vector2(-4.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-4.5F, -2.4849999F), new Vector2(-2.4849999F, -4.5F), new Vector2(0F, -4.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: marker
            // - - ShapeGroup: Group 1 Offset:<24, 20.612>
            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(12.5F, -2.61199999F));
                    builder.AddCubicBezier(new Vector2(12.5F, -9.51599979F), new Vector2(6.90399981F, -15.1120005F), new Vector2(0F, -15.1120005F));
                    builder.AddCubicBezier(new Vector2(-6.90399981F, -15.1120005F), new Vector2(-12.5F, -9.51599979F), new Vector2(-12.5F, -2.61199999F));
                    builder.AddCubicBezier(new Vector2(-12.5F, 0.486000001F), new Vector2(-11.3669996F, 3.31500006F), new Vector2(-9.5010004F, 5.49900007F));
                    builder.AddCubicBezier(new Vector2(-9.5010004F, 5.49900007F), new Vector2(-3.56800008F, 12.4049997F), new Vector2(-1.66600001F, 14.2200003F));
                    builder.AddCubicBezier(new Vector2(-0.731000006F, 15.1120005F), new Vector2(0.730000019F, 15.1120005F), new Vector2(1.66499996F, 14.2200003F));
                    builder.AddCubicBezier(new Vector2(3.88199997F, 12.1059999F), new Vector2(9.5F, 5.49900007F), new Vector2(9.5F, 5.49900007F));
                    builder.AddCubicBezier(new Vector2(11.3669996F, 3.31500006F), new Vector2(12.5F, 0.486000001F), new Vector2(12.5F, -2.61199999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // Shape tree root for layer: marker
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: Group 2 Offset:<24, 18>
                shapes.Add(SpriteShape_4());
                // ShapeGroup: Group 1 Offset:<24, 20.612>
                shapes.Add(SpriteShape_5());
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            CompositionEffectBrush EffectBrush_0()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationOut;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            CompositionEffectBrush EffectBrush_1()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationOut;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_2());
                result.SetSourceParameter("source", SurfaceBrush_3());
                return result;
            }

            // - Opacity for layer: circle 2
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            CompositionPathGeometry PathGeometry_1()
            {
                return _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 2 Offset:<24, 18>
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 1 Offset:<24, 20.612>
            CompositionPathGeometry PathGeometry_4()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
            }

            // Opacity for layer: circle 2
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<24, 36>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 36F), ColorBrush_Black());;
                return result;
            }

            // Shape tree root for layer: mask 2
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<24, 20.501>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 20.5009995F), _colorBrush_Black);;
                return result;
            }

            // Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<24, 36>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 36F), _colorBrush_Black);;
                return result;
            }

            // Shape tree root for layer: mask
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<24, 20.501>
                var geometry = _pathGeometry_1;
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 20.5009995F), _colorBrush_Black);;
                return result;
            }

            // - Shape tree root for layer: marker
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<24, 18>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 18F));;
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 3F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: marker
            // Path 1
            CompositionSpriteShape SpriteShape_5()
            {
                // Offset:<24, 20.612>
                var result = CreateSpriteShape(PathGeometry_4(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 20.6119995F));;
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 3F;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionSurfaceBrush SurfaceBrush_2()
            {
                return _c.CreateSurfaceBrush(VisualSurface_2());
            }

            CompositionSurfaceBrush SurfaceBrush_3()
            {
                return _c.CreateSurfaceBrush(VisualSurface_3());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_2()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_2();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            CompositionVisualSurface VisualSurface_3()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_3();
                result.SourceSize = new Vector2(48F, 48F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Opacity for layer: circle 2
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask 2
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            ContainerVisual ContainerVisual_2()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Opacity for layer: circle
                result.Children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            ContainerVisual ContainerVisual_3()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: mask
                result.Children.InsertAtTop(ShapeVisual_3());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                children.InsertAtTop(SpriteVisual_0());
                children.InsertAtTop(SpriteVisual_1());
                // Shape tree root for layer: marker
                children.InsertAtTop(ShapeVisual_4());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Opacity for layer: circle 2
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, 0F, HoldThenStepEasingFunction());
                // Frame 24.
                result.InsertKeyFrame(0.857142866F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Opacity for layer: circle
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, _stepThenHoldEasingFunction);
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, 1F, _holdThenStepEasingFunction);
                // Frame 19.
                result.InsertKeyFrame(0.678571403F, 0F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Shape tree root for layer: circle 2
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 36>
                result.Shapes.Add(SpriteShape_0());
                StartProgressBoundAnimation(result, "Opacity", OpacityScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: mask 2
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 20.501>
                result.Shapes.Add(SpriteShape_1());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_0, _rootProgress);
                return result;
            }

            // Shape tree root for layer: circle
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 36>
                result.Shapes.Add(SpriteShape_2());
                StartProgressBoundAnimation(result, "Opacity", OpacityScalarAnimation_1_to_0(), _rootProgress);
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: mask
            ShapeVisual ShapeVisual_3()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 20.501>
                result.Shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "IsVisible", _isVisibleBooleanAnimation_1, _rootProgress);
                return result;
            }

            // Shape tree root for layer: marker
            ShapeVisual ShapeVisual_4()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_0();
                return result;
            }

            SpriteVisual SpriteVisual_1()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(48F, 48F);
                result.Brush = EffectBrush_1();
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 2 Offset:<24, 18>
            // Path animation as a translation.
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _stepThenHoldEasingFunction);
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(0F, -1F), _cubicBezierEasingFunction_0);
                // Frame 8.
                result.InsertKeyFrame(0.285714298F, new Vector2(0F, -2.25F), _cubicBezierEasingFunction_0);
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(0F, 1F), _cubicBezierEasingFunction_0);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(0F, -0.469000012F), _cubicBezierEasingFunction_0);
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Shape tree root for layer: marker
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _stepThenHoldEasingFunction);
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(0F, -2F), _cubicBezierEasingFunction_0);
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Icons8_location_1__AnimatedVisual_UAPv8(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 8);
            }
        }

        sealed class Icons8_location_1__AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 11666666;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            StepEasingFunction _stepThenHoldEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation(float initialProgress, bool initialValue)
            {
                var result = _c.CreateBooleanKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue);
                return result;
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // Opacity for layer: circle 2
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_0()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, false);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, true);
                return result;
            }

            // Opacity for layer: circle
            BooleanKeyFrameAnimation IsVisibleBooleanAnimation_1()
            {
                // Frame 0.
                var result = CreateBooleanKeyFrameAnimation(0F, true);
                // Frame 19.
                result.InsertKeyFrame(0.678571403F, false);
                return result;
            }

            // - - - Opacity for layer: circle 2
            // - - ShapeGroup: Group 1 Offset:<24, 36>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 0.0130000003F));
                    builder.AddCubicBezier(new Vector2(-0.0160000008F, 0.0130000003F), new Vector2(-0.0309999995F, 0.00899999961F), new Vector2(-0.0309999995F, 0F));
                    builder.AddCubicBezier(new Vector2(-0.0309999995F, -0.00899999961F), new Vector2(-0.0160000008F, -0.0130000003F), new Vector2(0F, -0.0130000003F));
                    builder.AddCubicBezier(new Vector2(0.0160000008F, -0.0130000003F), new Vector2(0.0309999995F, -0.00899999961F), new Vector2(0.0309999995F, 0F));
                    builder.AddCubicBezier(new Vector2(0.0309999995F, 0.00899999961F), new Vector2(0.0160000008F, 0.0130000003F), new Vector2(0F, 0.0130000003F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(0F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Opacity for layer: circle
            // - - ShapeGroup: Group 1 Offset:<24, 36>
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(0F, 8F));
                    builder.AddCubicBezier(new Vector2(-9.44200039F, 8F), new Vector2(-19F, 5.25199986F), new Vector2(-19F, 0F));
                    builder.AddCubicBezier(new Vector2(-19F, -5.25199986F), new Vector2(-9.44200039F, -8F), new Vector2(0F, -8F));
                    builder.AddCubicBezier(new Vector2(9.44099998F, -8F), new Vector2(19F, -5.25199986F), new Vector2(19F, 0F));
                    builder.AddCubicBezier(new Vector2(19F, 5.25199986F), new Vector2(9.44099998F, 8F), new Vector2(0F, 8F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    builder.BeginFigure(new Vector2(0F, -5F));
                    builder.AddCubicBezier(new Vector2(-9.7670002F, -5F), new Vector2(-16F, -2.03900003F), new Vector2(-16F, 0F));
                    builder.AddCubicBezier(new Vector2(-16F, 2.03900003F), new Vector2(-9.7670002F, 5F), new Vector2(0F, 5F));
                    builder.AddCubicBezier(new Vector2(9.7670002F, 5F), new Vector2(16F, 2.03900003F), new Vector2(16F, 0F));
                    builder.AddCubicBezier(new Vector2(16F, -2.03900003F), new Vector2(9.7670002F, -5F), new Vector2(0F, -5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: marker
            // - - ShapeGroup: Group 2 Offset:<24, 18>
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -4.5F));
                    builder.AddCubicBezier(new Vector2(2.4849999F, -4.5F), new Vector2(4.5F, -2.4849999F), new Vector2(4.5F, 0F));
                    builder.AddCubicBezier(new Vector2(4.5F, 2.4849999F), new Vector2(2.4849999F, 4.5F), new Vector2(0F, 4.5F));
                    builder.AddCubicBezier(new Vector2(-2.4849999F, 4.5F), new Vector2(-4.5F, 2.4849999F), new Vector2(-4.5F, 0F));
                    builder.AddCubicBezier(new Vector2(-4.5F, -2.4849999F), new Vector2(-2.4849999F, -4.5F), new Vector2(0F, -4.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: marker
            // - - ShapeGroup: Group 1 Offset:<24, 20.612>
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(12.5F, -2.61199999F));
                    builder.AddCubicBezier(new Vector2(12.5F, -9.51599979F), new Vector2(6.90399981F, -15.1120005F), new Vector2(0F, -15.1120005F));
                    builder.AddCubicBezier(new Vector2(-6.90399981F, -15.1120005F), new Vector2(-12.5F, -9.51599979F), new Vector2(-12.5F, -2.61199999F));
                    builder.AddCubicBezier(new Vector2(-12.5F, 0.486000001F), new Vector2(-11.3669996F, 3.31500006F), new Vector2(-9.5010004F, 5.49900007F));
                    builder.AddCubicBezier(new Vector2(-9.5010004F, 5.49900007F), new Vector2(-3.56800008F, 12.4049997F), new Vector2(-1.66600001F, 14.2200003F));
                    builder.AddCubicBezier(new Vector2(-0.731000006F, 15.1120005F), new Vector2(0.730000019F, 15.1120005F), new Vector2(1.66499996F, 14.2200003F));
                    builder.AddCubicBezier(new Vector2(3.88199997F, 12.1059999F), new Vector2(9.5F, 5.49900007F), new Vector2(9.5F, 5.49900007F));
                    builder.AddCubicBezier(new Vector2(11.3669996F, 3.31500006F), new Vector2(12.5F, 0.486000001F), new Vector2(12.5F, -2.61199999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // Shape tree root for layer: marker
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // ShapeGroup: Group 2 Offset:<24, 18>
                shapes.Add(SpriteShape_2());
                // ShapeGroup: Group 1 Offset:<24, 20.612>
                shapes.Add(SpriteShape_3());
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_1(), _rootProgress);
                return result;
            }

            // - Opacity for layer: circle 2
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 2 Offset:<24, 18>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 1 Offset:<24, 20.612>
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
            }

            // Opacity for layer: circle 2
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<24, 36>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 36F), ColorBrush_Black());;
                return result;
            }

            // Opacity for layer: circle
            // ShapeGroup: Group 1 Offset:<24, 36>
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<24, 36>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 24F, 36F), _colorBrush_Black);;
                return result;
            }

            // - Shape tree root for layer: marker
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<24, 18>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 18F));;
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 3F;
                StartProgressBoundAnimation(result, "Offset", OffsetVector2Animation_0(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: marker
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<24, 20.612>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 24F, 20.6119995F));;
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 3F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Opacity for layer: circle 2
                children.InsertAtTop(ShapeVisual_0());
                // Opacity for layer: circle
                children.InsertAtTop(ShapeVisual_1());
                // Shape tree root for layer: marker
                children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Opacity for layer: circle 2
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, StepThenHoldEasingFunction());
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, 0F, HoldThenStepEasingFunction());
                // Frame 24.
                result.InsertKeyFrame(0.857142866F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // Opacity for layer: circle
            // Layer opacity animation
            ScalarKeyFrameAnimation OpacityScalarAnimation_1_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 1F, _stepThenHoldEasingFunction);
                // Frame 10.
                result.InsertKeyFrame(0.357142866F, 1F, _holdThenStepEasingFunction);
                // Frame 19.
                result.InsertKeyFrame(0.678571403F, 0F, _cubicBezierEasingFunction_0);
                return result;
            }

            // Shape tree root for layer: circle 2
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.IsVisible = false;
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 36>
                result.Shapes.Add(SpriteShape_0());
                StartProgressBoundAnimation(result, "Opacity", OpacityScalarAnimation_0_to_1(), RootProgress());
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_0(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: circle
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                // ShapeGroup: Group 1 Offset:<24, 36>
                result.Shapes.Add(SpriteShape_1());
                StartProgressBoundAnimation(result, "Opacity", OpacityScalarAnimation_1_to_0(), _rootProgress);
                StartProgressBoundAnimation(result, "IsVisible", IsVisibleBooleanAnimation_1(), _rootProgress);
                return result;
            }

            // Shape tree root for layer: marker
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(48F, 48F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // - - Shape tree root for layer: marker
            // ShapeGroup: Group 2 Offset:<24, 18>
            // Path animation as a translation.
            Vector2KeyFrameAnimation OffsetVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _stepThenHoldEasingFunction);
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(0F, -1F), _cubicBezierEasingFunction_0);
                // Frame 8.
                result.InsertKeyFrame(0.285714298F, new Vector2(0F, -2.25F), _cubicBezierEasingFunction_0);
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(0F, 1F), _cubicBezierEasingFunction_0);
                // Frame 15.
                result.InsertKeyFrame(0.535714269F, new Vector2(0F, -0.469000012F), _cubicBezierEasingFunction_0);
                // Frame 17.
                result.InsertKeyFrame(0.607142866F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            // - Shape tree root for layer: marker
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(0F, 0F), _stepThenHoldEasingFunction);
                // Frame 5.
                result.InsertKeyFrame(0.178571433F, new Vector2(0F, 0F), _holdThenStepEasingFunction);
                // Frame 6.
                result.InsertKeyFrame(0.214285716F, new Vector2(0F, -2F), _cubicBezierEasingFunction_0);
                // Frame 13.
                result.InsertKeyFrame(0.464285702F, new Vector2(0F, 0F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal Icons8_location_1__AnimatedVisual_UAPv7(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(48F, 48F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
