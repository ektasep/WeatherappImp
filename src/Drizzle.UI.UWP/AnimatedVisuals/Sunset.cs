//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1+g046e9eb0a2
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 2.4 -InputFile sunset.json
//       
//       Input file:
//           sunset.json (5308 bytes created 22:25+05:30 Aug 19 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// __________________________________________________________
// |       Object stats       | UAP v8 count | UAP v7 count |
// |__________________________|______________|______________|
// | All CompositionObjects   |           66 |           42 |
// |--------------------------+--------------+--------------|
// | Expression animators     |            1 |            1 |
// | KeyFrame animators       |            1 |            1 |
// | Reference parameters     |            1 |            1 |
// | Expression operations    |            0 |            0 |
// |--------------------------+--------------+--------------|
// | Animated brushes         |            - |            - |
// | Animated gradient stops  |            - |            - |
// | ExpressionAnimations     |            1 |            1 |
// | PathKeyFrameAnimations   |            - |            - |
// |--------------------------+--------------+--------------|
// | ContainerVisuals         |            3 |            1 |
// | ShapeVisuals             |            3 |            2 |
// |--------------------------+--------------+--------------|
// | ContainerShapes          |            - |            - |
// | CompositionSpriteShapes  |            4 |            3 |
// |--------------------------+--------------+--------------|
// | Brushes                  |            8 |            4 |
// | Gradient stops           |            3 |            3 |
// | CompositionVisualSurface |            2 |            - |
// ----------------------------------------------------------
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.Graphics;
using Windows.UI;
using Windows.UI.Composition;

namespace Drizzle.UI.UWP.AnimatedVisuals
{
    // Name:        sunset
    // Frame rate:  60 fps
    // Frame count: 360
    // Duration:    6000.0 mS
    sealed class Sunset
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 6.000 seconds.
        internal const long c_durationTicks = 60000000;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (Sunset_AnimatedVisual_UAPv8.IsRuntimeCompatible())
            {
                var res = 
                    new Sunset_AnimatedVisual_UAPv8(
                        compositor
                        );
                    return res;
            }

            if (Sunset_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res = 
                    new Sunset_AnimatedVisual_UAPv7(
                        compositor
                        );
                    return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 360d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 360d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class Sunset_AnimatedVisual_UAPv8 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 60000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            ContainerVisual _root;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - Shape tree root for layer: sun
            // - -  Offset:<256, 292>
            // - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_00()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_02(), Geometry_03(), Geometry_04(), Geometry_05(), Geometry_06(), Geometry_07(), Geometry_08() },
                    CanvasFilledRegionDetermination.Alternate);
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -130.345001F));
                    builder.AddLine(new Vector2(0F, -180F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 180F));
                    builder.AddLine(new Vector2(0F, 130.345001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(92.1679993F, -92.1679993F));
                    builder.AddLine(new Vector2(127.278999F, -127.278999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-127.278999F, 127.278999F));
                    builder.AddLine(new Vector2(-92.1679993F, 92.1679993F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-92.1679993F, -92.1679993F));
                    builder.AddLine(new Vector2(-127.278999F, -127.278999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(127.278999F, 127.278999F));
                    builder.AddLine(new Vector2(92.1679993F, 92.1679993F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-130.345001F, 0F));
                    builder.AddLine(new Vector2(-180F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(180F, 0F));
                    builder.AddLine(new Vector2(130.345001F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: sun
            // - -  Offset:<256, 292>
            CanvasGeometry Geometry_09()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(84F, 0F));
                    builder.AddCubicBezier(new Vector2(84F, 46.3919983F), new Vector2(46.3919983F, 84F), new Vector2(0F, 84F));
                    builder.AddCubicBezier(new Vector2(-46.3919983F, 84F), new Vector2(-84F, 46.3919983F), new Vector2(-84F, 0F));
                    builder.AddCubicBezier(new Vector2(-84F, -46.3919983F), new Vector2(-46.3919983F, -84F), new Vector2(0F, -84F));
                    builder.AddCubicBezier(new Vector2(46.3919983F, -84F), new Vector2(84F, -46.3919983F), new Vector2(84F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Masks
            // - -  Offset:<256, 292>
            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(256.5F, 14F));
                    builder.AddLine(new Vector2(40.5789986F, 14F));
                    builder.AddCubicBezier(new Vector2(35.3709984F, 14F), new Vector2(30.3400002F, 15.8900003F), new Vector2(26.4200001F, 19.3199997F));
                    builder.AddLine(new Vector2(0.5F, 42F));
                    builder.AddLine(new Vector2(-25.4200001F, 19.3199997F));
                    builder.AddCubicBezier(new Vector2(-29.3400002F, 15.8900003F), new Vector2(-34.3709984F, 14F), new Vector2(-39.5789986F, 14F));
                    builder.AddLine(new Vector2(-255.5F, 14F));
                    builder.AddLine(new Vector2(-255.5F, -292F));
                    builder.AddLine(new Vector2(256.5F, -292F));
                    builder.AddLine(new Vector2(256.5F, 14F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: Layer 2
            // - -  Offset:<256, 350>
            CanvasGeometry Geometry_11()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-128F, -18F));
                    builder.AddLine(new Vector2(-40F, -18F));
                    builder.AddLine(new Vector2(0F, 18F));
                    builder.AddLine(new Vector2(40F, -18F));
                    builder.AddLine(new Vector2(128F, -18F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Shape tree root for layer: Layer 2
            // Offset:<256, 350>
            CompositionColorBrush ColorBrush_AlmostDarkSlateGray_FF374151()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x37, 0x41, 0x51));
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionColorBrush ColorBrush_AlmostGoldenrod_FFFBBF24()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFB, 0xBF, 0x24));
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionColorBrush ColorBrush_AlmostOrange_FFF8AF18()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xF8, 0xAF, 0x18));
            }

            // - Masks
            // Offset:<256, 292>
            CompositionColorBrush ColorBrush_Black()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostGoldenrod_FFFABE23()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xFA, 0xBE, 0x23));
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // Stop 1
            CompositionColorGradientStop GradientStop_0p45_AlmostGoldenrod_FFFABE23()
            {
                return _c.CreateColorGradientStop(0.449999988F, Color.FromArgb(0xFF, 0xFA, 0xBE, 0x23));
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // Stop 2
            CompositionColorGradientStop GradientStop_1_AlmostOrange_FFF59E0A()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xF5, 0x9E, 0x0A));
            }

            CompositionEffectBrush EffectBrush()
            {
                var compositeEffect = new CompositeEffect();
                compositeEffect.Mode = CanvasComposite.DestinationIn;
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("destination"));
                compositeEffect.Sources.Add(new CompositionEffectSourceParameter("source"));
                var effectFactory = _c.CreateEffectFactory(compositeEffect);
                var result = effectFactory.CreateBrush();
                result.SetSourceParameter("destination", SurfaceBrush_0());
                result.SetSourceParameter("source", SurfaceBrush_1());
                return result;
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostGoldenrod_FFFABE23());
                colorStops.Add(GradientStop_0p45_AlmostGoldenrod_FFFABE23());
                colorStops.Add(GradientStop_1_AlmostOrange_FFF59E0A());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-41.5169983F, -71.8710022F);
                result.EndPoint = new Vector2(42.4970016F, 73.6449966F);
                return result;
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            // Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_00()));
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_09()));
            }

            // - Masks
            // Offset:<256, 292>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_10()));
            }

            // - Shape tree root for layer: Layer 2
            // Offset:<256, 350>
            CompositionPathGeometry PathGeometry_3()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_11()));
            }

            // Shape tree root for layer: sun
            // Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<256, 292>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 256F, 292F));;
                result.StrokeBrush = ColorBrush_AlmostGoldenrod_FFFBBF24();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 24F;
                result.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_45());
                var controller = result.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // Shape tree root for layer: sun
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<256, 292>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 256F, 292F), LinearGradientBrush());;
                result.StrokeBrush = ColorBrush_AlmostOrange_FFF8AF18();
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 6F;
                return result;
            }

            // Masks
            // Offset:<256, 292>
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<256, 292>
                var geometry = PathGeometry_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 256F, 292F), ColorBrush_Black());;
                return result;
            }

            // Shape tree root for layer: Layer 2
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<256, 350>
                var result = CreateSpriteShape(PathGeometry_3(), new Matrix3x2(1F, 0F, 0F, 1F, 256F, 350F));;
                result.StrokeBrush = ColorBrush_AlmostDarkSlateGray_FF374151();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 18F;
                return result;
            }

            CompositionSurfaceBrush SurfaceBrush_0()
            {
                return _c.CreateSurfaceBrush(VisualSurface_0());
            }

            CompositionSurfaceBrush SurfaceBrush_1()
            {
                return _c.CreateSurfaceBrush(VisualSurface_1());
            }

            CompositionVisualSurface VisualSurface_0()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_0();
                result.SourceSize = new Vector2(512F, 512F);
                return result;
            }

            CompositionVisualSurface VisualSurface_1()
            {
                var result = _c.CreateVisualSurface();
                result.SourceVisual = ContainerVisual_1();
                result.SourceSize = new Vector2(512F, 512F);
                return result;
            }

            ContainerVisual ContainerVisual_0()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Shape tree root for layer: sun
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.BorderMode = CompositionBorderMode.Soft;
                // Masks
                result.Children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                children.InsertAtTop(SpriteVisual_0());
                // Shape tree root for layer: Layer 2
                children.InsertAtTop(ShapeVisual_2());
                return result;
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_45()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 359.
                result.InsertKeyFrame(0.997222245F, 45F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            // Shape tree root for layer: sun
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                var shapes = result.Shapes;
                // Offset:<256, 292>
                shapes.Add(SpriteShape_0());
                // Offset:<256, 292>
                shapes.Add(SpriteShape_1());
                return result;
            }

            // Masks
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                // Offset:<256, 292>
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // Shape tree root for layer: Layer 2
            ShapeVisual ShapeVisual_2()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                // Offset:<256, 350>
                result.Shapes.Add(SpriteShape_3());
                return result;
            }

            SpriteVisual SpriteVisual_0()
            {
                var result = _c.CreateSpriteVisual();
                result.Size = new Vector2(512F, 512F);
                result.Brush = EffectBrush();
                return result;
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // RotationAngleInDegrees
            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            internal Sunset_AnimatedVisual_UAPv8(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(512F, 512F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 8);
            }
        }

        sealed class Sunset_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 60000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            ContainerVisual _root;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - Shape tree root for layer: sun
            // - -  Offset:<256, 292>
            // - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_00()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_01(), Geometry_02(), Geometry_03(), Geometry_04(), Geometry_05(), Geometry_06(), Geometry_07(), Geometry_08() },
                    CanvasFilledRegionDetermination.Alternate);
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_01()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, -130.345001F));
                    builder.AddLine(new Vector2(0F, -180F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_02()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(0F, 180F));
                    builder.AddLine(new Vector2(0F, 130.345001F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_03()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(92.1679993F, -92.1679993F));
                    builder.AddLine(new Vector2(127.278999F, -127.278999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_04()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-127.278999F, 127.278999F));
                    builder.AddLine(new Vector2(-92.1679993F, 92.1679993F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_05()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-92.1679993F, -92.1679993F));
                    builder.AddLine(new Vector2(-127.278999F, -127.278999F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_06()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(127.278999F, 127.278999F));
                    builder.AddLine(new Vector2(92.1679993F, 92.1679993F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_07()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-130.345001F, 0F));
                    builder.AddLine(new Vector2(-180F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - Shape tree root for layer: sun
            // - - -  Offset:<256, 292>
            // - - Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_08()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(180F, 0F));
                    builder.AddLine(new Vector2(130.345001F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: sun
            // - -  Offset:<256, 292>
            CanvasGeometry Geometry_09()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(84F, 0F));
                    builder.AddCubicBezier(new Vector2(84F, 46.3919983F), new Vector2(46.3919983F, 84F), new Vector2(0F, 84F));
                    builder.AddCubicBezier(new Vector2(-46.3919983F, 84F), new Vector2(-84F, 46.3919983F), new Vector2(-84F, 0F));
                    builder.AddCubicBezier(new Vector2(-84F, -46.3919983F), new Vector2(-46.3919983F, -84F), new Vector2(0F, -84F));
                    builder.AddCubicBezier(new Vector2(46.3919983F, -84F), new Vector2(84F, -46.3919983F), new Vector2(84F, 0F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - Shape tree root for layer: Layer 2
            // - -  Offset:<256, 350>
            CanvasGeometry Geometry_10()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-128F, -18F));
                    builder.AddLine(new Vector2(-40F, -18F));
                    builder.AddLine(new Vector2(0F, 18F));
                    builder.AddLine(new Vector2(40F, -18F));
                    builder.AddLine(new Vector2(128F, -18F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - Shape tree root for layer: Layer 2
            // Offset:<256, 350>
            CompositionColorBrush ColorBrush_AlmostDarkSlateGray_FF374151()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x37, 0x41, 0x51));
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionColorBrush ColorBrush_AlmostGoldenrod_FFFBBF24()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFB, 0xBF, 0x24));
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionColorBrush ColorBrush_AlmostOrange_FFF8AF18()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xF8, 0xAF, 0x18));
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // Stop 0
            CompositionColorGradientStop GradientStop_0_AlmostGoldenrod_FFFABE23()
            {
                return _c.CreateColorGradientStop(0F, Color.FromArgb(0xFF, 0xFA, 0xBE, 0x23));
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // Stop 1
            CompositionColorGradientStop GradientStop_0p45_AlmostGoldenrod_FFFABE23()
            {
                return _c.CreateColorGradientStop(0.449999988F, Color.FromArgb(0xFF, 0xFA, 0xBE, 0x23));
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // Stop 2
            CompositionColorGradientStop GradientStop_1_AlmostOrange_FFF59E0A()
            {
                return _c.CreateColorGradientStop(1F, Color.FromArgb(0xFF, 0xF5, 0x9E, 0x0A));
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionLinearGradientBrush LinearGradientBrush()
            {
                var result = _c.CreateLinearGradientBrush();
                var colorStops = result.ColorStops;
                colorStops.Add(GradientStop_0_AlmostGoldenrod_FFFABE23());
                colorStops.Add(GradientStop_0p45_AlmostGoldenrod_FFFABE23());
                colorStops.Add(GradientStop_1_AlmostOrange_FFF59E0A());
                result.MappingMode = CompositionMappingMode.Absolute;
                result.StartPoint = new Vector2(-41.5169983F, -71.8710022F);
                result.EndPoint = new Vector2(42.4970016F, 73.6449966F);
                return result;
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            // Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_00()));
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            CompositionPathGeometry PathGeometry_1()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_09()));
            }

            // - Shape tree root for layer: Layer 2
            // Offset:<256, 350>
            CompositionPathGeometry PathGeometry_2()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_10()));
            }

            // Shape tree root for layer: sun
            // Path 8+Path 7+Path 6+Path 5+Path 4+Path 3+Path 2+Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<256, 292>
                var result = CreateSpriteShape(PathGeometry_0(), new Matrix3x2(1F, 0F, 0F, 1F, 256F, 292F));;
                result.StrokeBrush = ColorBrush_AlmostGoldenrod_FFFBBF24();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 24F;
                result.StartAnimation("RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_45());
                var controller = result.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // Shape tree root for layer: sun
            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<256, 292>
                var geometry = PathGeometry_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 256F, 292F), LinearGradientBrush());;
                result.StrokeBrush = ColorBrush_AlmostOrange_FFF8AF18();
                result.StrokeMiterLimit = 5F;
                result.StrokeThickness = 6F;
                return result;
            }

            // Shape tree root for layer: Layer 2
            // Path 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<256, 350>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, 256F, 350F));;
                result.StrokeBrush = ColorBrush_AlmostDarkSlateGray_FF374151();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 18F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                var children = result.Children;
                // Shape tree root for layer: sun
                children.InsertAtTop(ShapeVisual_0());
                // Shape tree root for layer: Layer 2
                children.InsertAtTop(ShapeVisual_1());
                return result;
            }

            // - Shape tree root for layer: sun
            // Offset:<256, 292>
            // Rotation
            ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_45()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 359.
                result.InsertKeyFrame(0.997222245F, 45F, _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F)));
                return result;
            }

            // Shape tree root for layer: sun
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                var shapes = result.Shapes;
                // Offset:<256, 292>
                shapes.Add(SpriteShape_0());
                // Offset:<256, 292>
                shapes.Add(SpriteShape_1());
                return result;
            }

            // Shape tree root for layer: Layer 2
            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(512F, 512F);
                // Offset:<256, 350>
                result.Shapes.Add(SpriteShape_2());
                return result;
            }

            // - - Shape tree root for layer: sun
            // -  Offset:<256, 292>
            // RotationAngleInDegrees
            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            internal Sunset_AnimatedVisual_UAPv7(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(512F, 512F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
