//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.1+g046e9eb0a2
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 2.4 -InputFile SunCircle.json
//       
//       Input file:
//           SunCircle.json (3678 bytes created 12:26+05:30 Aug 28 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    50 |
// |--------------------------+-------|
// | Expression animators     |     2 |
// | KeyFrame animators       |     2 |
// | Reference parameters     |     2 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     - |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     3 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace Drizzle.UI.UWP.AnimatedVisuals
{
    // Name:        sun
    // Frame rate:  25 fps
    // Frame count: 125
    // Duration:    5000.0 mS
    // ____________________________________________________________________
    // |    Marker     |    Constant     | Frame |   mS   |   Progress    |
    // |_______________|_________________|_______|________|_______________|
    // | #start-input  | M__start_input  |     5 |  200.0 | 0.0403999984F |
    // | #end-output_0 | M__end_output_0 |    30 | 1200.0 | 0.240400001F  |
    // | #start-ring   | M__start_ring   |    45 | 1800.0 | 0.360399991F  |
    // | #end-ring     | M__end_ring     |    65 | 2600.0 | 0.520399988F  |
    // | #start-output | M__start_output |    85 | 3400.0 | 0.680400014F  |
    // | #end-output_1 | M__end_output_1 |   113 | 4520.0 | 0.904399991F  |
    // --------------------------------------------------------------------
    sealed class SunCircle
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 5.000 seconds.
        internal const long c_durationTicks = 50000000;

        // Marker: #start-input.
        internal const float M__start_input = 0.0403999984F;

        // Marker: #end-output_0.
        internal const float M__end_output_0 = 0.240400001F;

        // Marker: #start-ring.
        internal const float M__start_ring = 0.360399991F;

        // Marker: #end-ring.
        internal const float M__end_ring = 0.520399988F;

        // Marker: #start-output.
        internal const float M__start_output = 0.680400014F;

        // Marker: #end-output_1.
        internal const float M__end_output_1 = 0.904399991F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (SunCircle_AnimatedVisual.IsRuntimeCompatible())
            {
                var res = 
                    new SunCircle_AnimatedVisual(
                        compositor
                        );
                    return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 125d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 25d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 125d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
                { "#start-input", 0.0404 },
                { "#end-output_0", 0.2404 },
                { "#start-ring", 0.3604 },
                { "#end-ring", 0.5204 },
                { "#start-output", 0.6804 },
                { "#end-output_1", 0.9044 },
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class SunCircle_AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 50000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - Shape tree root for layer: #sun
            // Offset:<200, 200>
            CompositionColorBrush ColorBrush_AlmostGold_FFFFC600()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xC6, 0x00));
            }

            // - Shape tree root for layer: #sun
            // Offset:<200, 200>
            CompositionColorBrush ColorBrush_SemiTransparentAlmostMediumSpringGreen_3300FF9C()
            {
                return _c.CreateColorBrush(Color.FromArgb(0x33, 0x00, 0xFF, 0x9C));
            }

            // - Shape tree root for layer: #sun
            // Offset:<200, 200>
            CompositionColorBrush ColorBrush_SemiTransparentAlmostMediumSpringGreen_7F00FF9B()
            {
                return _c.CreateColorBrush(Color.FromArgb(0x7F, 0x00, 0xFF, 0x9B));
            }

            // - Shape tree root for layer: #sun
            // Offset:<200, 200>
            // Tracé d'ellipse 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_0_0()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(0F, 0F);
                StartProgressBoundAnimation(result, "Radius", RadiusVector2Animation_0(), RootProgress());
                return result;
            }

            // - Shape tree root for layer: #sun
            // Offset:<200, 200>
            // Tracé d'ellipse 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_0_1()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(0F, 0F);
                StartProgressBoundAnimation(result, "Radius", RadiusVector2Animation_1(), _rootProgress);
                return result;
            }

            // - Shape tree root for layer: #sun
            // Offset:<200, 200>
            // Tracé d'ellipse 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_72p5()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(72.5F, 72.5F);
                return result;
            }

            // Shape tree root for layer: #sun
            // Tracé d'ellipse 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<200, 200>
                var geometry = Ellipse_0_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F), ColorBrush_SemiTransparentAlmostMediumSpringGreen_3300FF9C());;
                return result;
            }

            // Shape tree root for layer: #sun
            // Tracé d'ellipse 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<200, 200>
                var geometry = Ellipse_0_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F), ColorBrush_SemiTransparentAlmostMediumSpringGreen_7F00FF9B());;
                return result;
            }

            // Shape tree root for layer: #sun
            // Tracé d'ellipse 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<200, 200>
                var geometry = Ellipse_72p5();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 200F, 200F), ColorBrush_AlmostGold_FFFFC600());;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: #sun
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.666999996F, 1F));
            }

            ExpressionAnimation RootProgress()
            {
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Shape tree root for layer: #sun
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(400F, 400F);
                var shapes = result.Shapes;
                // Offset:<200, 200>
                shapes.Add(SpriteShape_0());
                // Offset:<200, 200>
                shapes.Add(SpriteShape_1());
                // Offset:<200, 200>
                shapes.Add(SpriteShape_2());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - - Shape tree root for layer: #sun
            // -  Offset:<200, 200>
            // Tracé d'ellipse 1.EllipseGeometry
            // Radius
            Vector2KeyFrameAnimation RadiusVector2Animation_0()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(110F, 110F), HoldThenStepEasingFunction());
                // Frame 13.
                result.InsertKeyFrame(0.104000002F, new Vector2(120F, 120F), _c.CreateCubicBezierEasingFunction(new Vector2(0.307000011F, 0.456999987F), new Vector2(0.666999996F, 1F)));
                // Frame 38.
                result.InsertKeyFrame(0.30399999F, new Vector2(100F, 100F), CubicBezierEasingFunction_0());
                // Frame 63.
                result.InsertKeyFrame(0.504000008F, new Vector2(120F, 120F), _cubicBezierEasingFunction_0);
                // Frame 88.
                result.InsertKeyFrame(0.703999996F, new Vector2(100F, 100F), _cubicBezierEasingFunction_0);
                // Frame 101.
                result.InsertKeyFrame(0.808000028F, new Vector2(110F, 110F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.842999995F, 0.778999984F)));
                return result;
            }

            // - - Shape tree root for layer: #sun
            // -  Offset:<200, 200>
            // Tracé d'ellipse 1.EllipseGeometry
            // Radius
            Vector2KeyFrameAnimation RadiusVector2Animation_1()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(85F, 85F), _holdThenStepEasingFunction);
                // Frame 13.
                result.InsertKeyFrame(0.104000002F, new Vector2(80F, 80F), _c.CreateCubicBezierEasingFunction(new Vector2(0.25999999F, 0.393999994F), new Vector2(0.666999996F, 1F)));
                // Frame 38.
                result.InsertKeyFrame(0.30399999F, new Vector2(90F, 90F), _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0F), new Vector2(0.654999971F, 0.998000026F)));
                // Frame 63.
                result.InsertKeyFrame(0.504000008F, new Vector2(80F, 80F), _c.CreateCubicBezierEasingFunction(new Vector2(0.363999993F, 0F), new Vector2(0.504999995F, 0.995999992F)));
                // Frame 88.
                result.InsertKeyFrame(0.703999996F, new Vector2(90F, 90F), _c.CreateCubicBezierEasingFunction(new Vector2(0.508000016F, 0F), new Vector2(0.519999981F, 0.998000026F)));
                // Frame 101.
                result.InsertKeyFrame(0.808000028F, new Vector2(85F, 85F), _c.CreateCubicBezierEasingFunction(new Vector2(0.418000013F, 0F), new Vector2(0.814999998F, 0.680000007F)));
                return result;
            }

            internal SunCircle_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(400F, 400F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
